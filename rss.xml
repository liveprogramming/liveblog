<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>LIVE PROG BLOG</title>
    <link>http://liveprogramming.github.io</link>
    <pubDate>2013-04-22 15:07:06 -0400</pubDate>
    <item>
      <title>Plenary Session</title>
      <link>http://liveprogramming.github.io/liveblog/2013/04/plenary-session</link>
      <pubDate>2013-04-21</pubDate>
      <description>&lt;p&gt;&lt;a href="http://liveprogramming.github.io/2013/"&gt;LIVE 2013&lt;/a&gt; will start with a bang, featuring three speakers with deep roots in the history of live programming.
&lt;a href="http://www.cs.washington.edu/people/faculty/tanimoto/"&gt;Steve Tanimoto&lt;/a&gt; will be revisiting his framework on &amp;quot;liveness&amp;quot; and thoughts on new levels and directions.&lt;br&gt;
&lt;a href="http://researcher.watson.ibm.com/researcher/view.php?person=us-davidungar"&gt;David Ungar&lt;/a&gt; and &lt;a href="http://labs.oracle.com/pls/apex/f?p=labs:bio:0:118"&gt;Randy Smith&lt;/a&gt; will be jointly talking about the hugely inspirational systems Ark and Self.&lt;br&gt;
&lt;a href="http://www.sussex.ac.uk/Users/thm21/"&gt;Thor Magnusson&lt;/a&gt; will be speaking about the history of the live coding music scene and his newest live coding system.&lt;/p&gt;

&lt;h3 id="toc_0"&gt;Steve Tanimoto Revisits Liveness&lt;/h3&gt;

&lt;p&gt;&lt;img src="/liveblog/assets/media/tanimoto.png" alt="Tanimoto"&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Liveness in programming environments generally
refers to the ability to modify a running program. It can be
considered as a form of a more general class of behaviors that are
various forms of information to programmers about what they
are constructing. This paper gives a brief historical perspective
on liveness and proposes an extension of a hierarchy given in
1990, to now account for even more powerful execution-oriented
tools for programmers. In addition, while liveness concerns the
timeliness of execution feedback, considering a broader array of
forms of feedback is helpful both in better understanding liveness
and in designing ever more powerful development tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Full paper will be posted after conference.&lt;/p&gt;

&lt;h3 id="toc_1"&gt;David Ungar and Randall Smith Reflect on Self&lt;/h3&gt;

&lt;p&gt;&lt;img src="/liveblog/assets/media/ungar.png" alt="Ungar"&gt;&lt;img src="/liveblog/assets/media/smith.png" alt="smith"&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We were delighted to see a workshop dedicated to Live Programming, 
as we have been fortunate to have been programming in live environments since 1969, 
and building them since 1985. Since those early days, many have created environments that rapidly respond to what people do, 
a tremendous benefit. Systems do indeed feel live when they react on their own to stay a consistent part of the world. 
We propose here a broader definition of liveness, one that emerges from the design principle of making everything seem real. 
(After all, reality itself is live.) In any such system, the user must always see the true state of the actual thing, 
and so the reactive character of liveness emerges naturally. But a deeper feeling of liveness emerges when the user 
is immersed in an entire world that maintains a consistent physics, when the thing on the screen is supposed to be the actual thing. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Read &lt;a href="http://davidungar.net/Live2013/Live_2013.html"&gt;more details&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="toc_2"&gt;Thor Magnusson on Live Coding and the Threnoscope&lt;/h3&gt;

&lt;p&gt;&lt;img src="/liveblog/assets/media/thor.png" alt="Thor"&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This year is the tenth anniversary of organized live coding
in the arts (see &lt;a href="http://www.toplap.org"&gt;www.toplap.org&lt;/a&gt;). Diverse live coding systems,
festivals, club nights, conference tracks, journal issues, and
research projects have appeared in the last decade that have
made this form of practice well known within the fields of art,
music and science (in particular computer science). With its
foundation in musical performance, live coding has now
become common in visual arts, light systems, robotics, dance,
poetry, and other art forms that can operate with algorithmic
instructions. This paper introduces a new direction in the field of
artistic live coding where musical works are presented as pieces
in the form of a live coding system. The system itself and the code
affordances become equivalent to score system in an open
musical work for strong improvisation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Checkout the &lt;a href="http://vimeo.com/63335988"&gt;Threnoscope demo video&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Live Programming Contest Winners</title>
      <link>http://liveprogramming.github.io/liveblog/2013/04/live-programming-contest-winners</link>
      <pubDate>2013-04-12</pubDate>
      <description>&lt;h2 id="toc_0"&gt;Live Demos&lt;/h2&gt;

&lt;p&gt;We are proud to announce the winners of this year&amp;#39;s LIVE programming contest!&lt;/p&gt;

&lt;p&gt;We received 14 outstanding live programming demos and had a really hard time selecting the 3 winners. All demos will be presented live at the &lt;a href="http://http://liveprogramming.github.com/2013"&gt;LIVE workshop, on May 19, in San Francisco&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Contest Winners&lt;/h2&gt;

&lt;h3 id="toc_2"&gt;1st Place, &lt;a href="https://github.com/shurcooL/Conception#conception"&gt;Conception&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Conception is a programmer&amp;#39;s playground that blends ideas from systems such as Code Bubbles and Self, allowing a programmer to manipulate source code, execution, output,
and many other programming artifacts, such as diffs and gists.  Even at an early stage, Conception has many neat ideas.  Watch the video!&lt;/p&gt;

&lt;iframe width="640" height="360" src="http://www.youtube.com/embed/DNJ7HqlV55k?feature=player_embedded" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3 id="toc_3"&gt;2nd Place, &lt;a href="http://www.cs.berkeley.edu/%7Ejoel/codehint/"&gt;CodeHint&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;CodeHint is an excellent example of how ideas from live programming can be extended into mainstream programming environments.
CodeHint supports &lt;em&gt;predictive programming&lt;/em&gt;, which Tanimoto describes as a &amp;quot;fifth-level&amp;quot; of liveness.
CodeHint does this by simultaneously executing different possible API calls, allowing a programmer to interactively select which new changes to encorporate into the program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The video is best viewed in full-screen with audio.&lt;/strong&gt;
&lt;video width="640" height="360" src="http://www.cs.berkeley.edu/~joel/codehint/demo.webm" controls&gt;
    Please use Firefox or Chrome to view this video.
&lt;/video&gt;&lt;/p&gt;

&lt;h3 id="toc_4"&gt;3rd Place, &lt;a href="http://echobin.wordpress.com/2013/04/04/improvisation-on-a-live-coded-mobile-musical-instrument-using-urmus/"&gt;urMus&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;urMus is a collaborative live coding system, which produces a live instrument manipulated by a performer.  The prototype system offers an interesting perspective on 
the production of live coding, as well as opening up interesting possibilities for a collobrative team of programmers to bring something to life.&lt;/p&gt;

&lt;iframe width="640" height="360" src="http://www.youtube.com/embed/B9VYA_6spoI?feature=player_detailpage" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id="toc_5"&gt;See the demos!&lt;/h2&gt;

&lt;p&gt;If you like to watch these demos and come join us on May 19 in San Francisco. Besides the demos, the workshop will feature an track with lighting talks and hands-on working groups. We expect a mixed crowd of academics and practitioners from all over the world. Early bird tickets are available until this Sunday, April 14, &lt;a href="http://http://liveprogramming.github.com/2013/register.html"&gt;register now&lt;/a&gt; hurry up!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A History of Live Programming</title>
      <link>http://liveprogramming.github.io/liveblog/2013/01/a-history-of-live-programming</link>
      <pubDate>2013-01-13</pubDate>
      <description></description>
    </item>
  </channel>
</rss>
